package main

//连接数据,完成插入操作
//获取第三方库:驱动和对应的封装
/*
go get github.com/go-sql-driver/mysql
go get github.com/jmoiron/sqlx
*/
import (
	"fmt"
	_ "github.com/go-sql-driver/mysql"
	"github.com/jmoiron/sqlx"
)

func main() {
	//1.获取连接:sqlx.Open("驱动名称",账号:密码@tcp(ip:端口)/数据库名称)
	database, err := sqlx.Open("mysql",
		"root:qwe456654.@tcp(localhost:3306)/gopro")
	if err != nil {
		fmt.Println("连接失败!")
	}

	//2.执行语句:Exec(query string, args ...any) (Result, error)
	//添加,修改,删除都可以通过Exec完成
	r, err2 := database.Exec(
		"insert into person(username,gender,email) value('ekko','男','18989@qq.com')")
	if err2 != nil {
		fmt.Println(err2)
	}
	//3.获取执行后返回结果
	id, _ := r.LastInsertId() //如果有自增主键
	fmt.Println(id)
	affected, _ := r.RowsAffected() //获取受影响的行
	fmt.Println(affected)

	//4.关闭数据库
	database.Close()
}

//返回的result接口
/*type Result interface {
	// LastInsertId returns the integer generated by the database
	// in response to a command. Typically this will be from an
	// "auto increment" column when inserting a new row. Not all
	// databases support this feature, and the syntax of such
	// statements varies.
	LastInsertId() (int64, error)

	// RowsAffected returns the number of rows affected by an
	// update, insert, or delete. Not every database or database
	// driver may support this.
	RowsAffected() (int64, error)
}
*/
